.char {
  fill: none; /* 塗りつぶし無しで線だけに */
  stroke: #231815;
  stroke-width: 2;
  stroke-dasharray: 1000;  /* 線の長さを仮に1000 */
  stroke-dashoffset: 1000;
  animation: draw 1s ease-out forwards;
}

.char:nth-of-type(1) {
  animation-delay: 0s;
}
.char:nth-of-type(2) {
  animation-delay: 0.5s;
}
.char:nth-of-type(3) {
  animation-delay: 1s;
}
/* 必要に応じて続ける */


@keyframes draw {
  to {
    stroke-dashoffset: 0;
  }
}


⏱️【一文字あたりのおすすめ秒数】

■ ナチュラルで心地よいスピード
1文字＝約0.2〜0.3秒（200〜300ms）
→ 例：5文字で 約1.5秒前後

■ ゆっくり見せたい・魅せたい時
1文字＝0.5秒くらい
→ 5文字なら2.5秒。映像っぽい演出に合う✨

■ テストしながら微調整するポイント
css
コードをコピーする
animation: draw 3s ease forwards;
みたいに animation-duration を 文字数×0.3秒 くらいで試してみて！

🧪 アニメ順に制御するCSSサンプル
css
コードをコピーする
@keyframes draw {
  to {
    stroke-dashoffset: 0;
  }
}

svg path {
  stroke: #fff;
  stroke-width: 2;
  fill: none;
  stroke-dasharray: 300;
  stroke-dashoffset: 300;
  animation: draw 0.5s ease forwards;
}

svg path:nth-child(1) { animation-delay: 0s; }
svg path:nth-child(2) { animation-delay: 0.3s; }
svg path:nth-child(3) { animation-delay: 0.6s; }


open.js

function playSequentialAnimation() {}
アニメーションを順番に再生するための関数（一気にまとめて処理するって意味）
hoverや自動で何回も呼び出せるように定義している

forEachは繰り返し処理に使われるやつ
lineはその中の一個、indexは0.1.2の順番の番号に使われる

アロー関数の定義
「アロー関数の手前にある単語（引数）は、アローの向こうで行われる処理の命令対象になる」